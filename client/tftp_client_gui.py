import tkinter as tk
from tkinter import filedialog, messagebox
import os
import tftp_client_core
from core import tftp_server_embedded

# üîπ Kh·ªüi ƒë·ªông server ng·∫ßm ngay khi GUI kh·ªüi ch·∫°y
tftp_server_embedded.start_server()


def browse_file():
    filename = filedialog.askopenfilename()
    if filename:
        file_entry.delete(0, tk.END)
        file_entry.insert(0, filename)

def start_transfer():
    filename = file_entry.get()
    server_ip = ip_entry.get()

    if not filename or not os.path.exists(filename):
        messagebox.showerror("L·ªói", "Vui l√≤ng ch·ªçn file h·ª£p l·ªá.")
        return

    if not server_ip:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p IP c·ªßa TFTP Server.")
        return

    result_label.config(text="ƒêang upload...")
    root.update()

    try:
        stats = tftp_client_core.send_file(filename, server_ip, port=69)  # d√πng ƒë√∫ng port ƒë√£ ƒë·ªïi

        if stats is None:
            result_label.config(text="‚ùå Upload th·∫•t b·∫°i. Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server.")
            return

        result_label.config(
            text=f"""‚úÖ Upload ho√†n t·∫•t!
Blocks ƒë√£ g·ª≠i: {stats['sent_blocks']}
ACK nh·∫≠n: {stats['acked_blocks']}
M·∫•t g√≥i: {stats['packet_loss']:.2f}%
T·ªëc ƒë·ªô: {stats['transfer_speed']:.2f} KB/s
Th·ªùi gian: {stats['elapsed_time']:.2f} gi√¢y"""
        )

    except Exception as e:
        messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

# GUI setup
root = tk.Tk()
root.title("TFTP Packet Loss Client")
root.geometry("500x350")
root.resizable(False, False)

tk.Label(root, text="Ch·ªçn file:").pack(pady=5)
file_frame = tk.Frame(root)
file_frame.pack()
file_entry = tk.Entry(file_frame, width=50)
file_entry.pack(side=tk.LEFT, padx=5)
tk.Button(file_frame, text="Browse", command=browse_file).pack(side=tk.LEFT)

tk.Label(root, text="Nh·∫≠p IP Server:").pack(pady=5)
ip_entry = tk.Entry(root, width=30)
ip_entry.insert(0, "127.0.0.1")
ip_entry.pack()

tk.Button(root, text="Upload", command=start_transfer, bg="#007bff", fg="white", width=20).pack(pady=15)

result_label = tk.Label(root, text="", justify=tk.LEFT, font=("Arial", 10))
result_label.pack(pady=10)

root.mainloop()
